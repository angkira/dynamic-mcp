name: Deploy server to Cloud Run

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOY_SA }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Who am I (gcloud)
        run: |
          gcloud auth list --filter=status:ACTIVE --format='value(account)'
          gcloud config get-value account
          gcloud config list --format 'value(core.project)'

      - name: Ensure staging bucket and grant access
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION: ${{ secrets.GCP_REGION }}
          STAGING_BUCKET: ${{ secrets.STAGING_BUCKET }}
          # The setup script detects the deploy SA from SERVICE_ACCOUNT_EMAIL or defaults to deploy-sa@proj
          SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_DEPLOY_SA }}
          # Do not attempt creation in CI unless explicitly allowed
          ALLOW_BUCKET_CREATE: ${{ vars.ALLOW_BUCKET_CREATE || 'false' }}
        run: bash server/gcp/00-staging-bucket.sh

      - name: Provision secrets in Secret Manager
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION: ${{ secrets.GCP_REGION }}
          # App secrets (ensure these are set in GitHub repo secrets)
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_REDIRECT_URI: ${{ secrets.GOOGLE_OAUTH_REDIRECT_URI }}
          GH_OAUTH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}
          GH_OAUTH_CLIENT_SECRET: ${{ secrets.GH_OAUTH_CLIENT_SECRET }}
          JWT_SIGNING_KEY: ${{ secrets.JWT_SIGNING_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CHATGPT_API_KEY: ${{ secrets.CHATGPT_API_KEY }}
          MCP_API_KEY: ${{ secrets.MCP_API_KEY }}
          # Database credentials (either provide DATABASE_URL or compose from these)
          APP_DB_PASSWORD: ${{ secrets.APP_DB_PASSWORD }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: bash server/gcp/05-secrets.sh

      - name: Build + Deploy via script
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION: ${{ secrets.GCP_REGION }}
          AR_REPO: ${{ secrets.GCP_ARTIFACT_REPO }}
          SERVICE_NAME: ${{ secrets.GCP_RUN_SERVICE }}
          STAGING_BUCKET: ${{ secrets.STAGING_BUCKET }}
          # Optional: permit fallback to Cloud Build default if bucket perms are not yet consistent
          ALLOW_DEFAULT_STAGING_FALLBACK: ${{ vars.ALLOW_DEFAULT_STAGING_FALLBACK || 'false' }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
        run: bash server/gcp/08-build-and-deploy.sh
