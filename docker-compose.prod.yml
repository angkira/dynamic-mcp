services:
  # PostgreSQL database with optimizations
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      # Performance optimizations
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./docker/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Main server application
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile.prod
      # Use build cache
      cache_from:
        - dynamic-mcp-server:latest
      target: runner
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Separate MCP servers as independent services
  mcp-memory:
    build:
      context: .
      dockerfile: ./server/Dockerfile.prod
      cache_from:
        - dynamic-mcp-server:latest
      target: runner
    env_file:
      - .env
    environment:
      - MCP_SERVER=memory
    depends_on:
      db:
        condition: service_healthy
    command: ["sh", "-c", "cd /app && node dist/mcp-servers/memory-server.js"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  mcp-api:
    build:
      context: .
      dockerfile: ./server/Dockerfile.prod
      cache_from:
        - dynamic-mcp-server:latest
      target: runner
    env_file:
      - .env
    environment:
      - MCP_SERVER=api
    depends_on:
      db:
        condition: service_healthy
    command: ["sh", "-c", "cd /app && node dist/mcp-servers/dynamic-mcp-api-server.js"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Frontend client with optimizations
  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile.prod
      cache_from:
        - dynamic-mcp-client:latest
      target: runner
      args:
        - VITE_API_URL=${VUE_API_URL}
        - VITE_SOCKET_URL=${VITE_SOCKET_URL}
    env_file:
      - .env
    depends_on:
      - server
    ports:
      - "80:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

volumes:
  db-data:
