# Optimized production Dockerfile for server (pinned Node version, multi-stage)
FROM node:22.18.0-alpine AS builder
ARG APP_UID=10001
ARG APP_GID=10001
WORKDIR /app
RUN addgroup -g ${APP_GID} -S app && adduser -S app -u ${APP_UID} -G app && chown -R app:app /app
RUN apk add --no-cache python3 make g++ libc6-compat

COPY package*.json ./
COPY server/package.json ./server/
COPY shared/package.json ./shared/
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY prisma/ ./prisma/

RUN npm ci -w @dynamic-mcp/shared -w @dynamic-mcp/server --include-workspace-root --prefer-offline --no-audit --no-fund --maxsockets=15 --fetch-timeout=300000

COPY shared/ ./shared/
COPY server/ ./server/
COPY packages/ ./packages/
RUN npm -w @dynamic-mcp/shared run build && cd server && npx tsc -p tsconfig.json --outDir /tmp/server-dist

FROM node:22.18.0-alpine AS runner
ARG APP_UID=10001
ARG APP_GID=10001
WORKDIR /app
RUN addgroup -g ${APP_GID} -S app && adduser -S app -u ${APP_UID} -G app && chown -R app:app /app
ENV NODE_ENV=production NODE_OPTIONS=--max-old-space-size=768 HOME=/home/app NPM_CONFIG_CACHE=/home/app/.npm
RUN apk add --no-cache tini
ENTRYPOINT ["/sbin/tini", "--"]

COPY --from=builder /app/package*.json ./
COPY --from=builder /app/server/package.json ./server/
COPY --from=builder /app/shared/package.json ./shared/
COPY --from=builder /app/node_modules ./node_modules
RUN npm prune --omit=dev && npm cache clean --force

COPY --from=builder /tmp/server-dist ./dist
COPY --from=builder /app/shared/dist ./shared/dist
COPY --from=builder /app/shared/prisma ./shared/prisma
COPY --from=builder /app/prisma ./prisma
COPY server/start-prod.sh ./start-prod.sh
RUN chmod +x ./start-prod.sh && chown -R app:app /app
USER app
EXPOSE 8080
CMD ["./start-prod.sh"]
