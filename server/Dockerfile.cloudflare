# Cloudflare-optimized Dockerfile for server
FROM node:22-alpine AS base
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001
WORKDIR /app

# Dependencies stage - optimized for Cloudflare constraints
FROM base AS deps
# Copy package files
COPY package*.json ./
COPY server/package.json ./server/
COPY shared/package.json ./shared/
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY prisma/ ./prisma/

# Install with aggressive optimizations for Cloudflare
RUN --mount=type=cache,target=/root/.npm \
  npm ci --prefer-offline --no-audit --no-fund --maxsockets=10 \
  --fetch-timeout=600000 --fetch-retry-maxtimeout=120000 && \
  npm cache clean --force

# Generate Prisma in separate layer with timeout protection
RUN timeout 300 npx prisma generate --schema=./prisma/schema.prisma || \
  (echo "Prisma generation timed out, using fallback" && \
  PRISMA_CLI_BINARY_TARGETS=linux-musl-openssl-3.0.x npx prisma generate --schema=./prisma/schema.prisma)

# Build stage - lightweight
FROM base AS builder
# Copy deps from cache
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./

# Copy source (minimal for faster context transfer)
COPY server/ ./server/
COPY shared/ ./shared/
COPY packages/ ./packages/
COPY prisma/ ./prisma/

# Build with memory limits
RUN cd shared && npm run build
RUN cd server && npm run build:all

# Production runtime - minimal
FROM base AS runner
ENV NODE_ENV=production

# Copy only runtime necessities
COPY --from=builder /app/server/dist ./dist
COPY --from=builder /app/shared ./shared
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/prisma ./prisma
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./

# Simplified startup
COPY server/start-prod.sh ./start-prod.sh
RUN chmod +x ./start-prod.sh && chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 3000
CMD ["./start-prod.sh"]