## Simple, robust single-stage build for Cloud Run
FROM node:22.18.0-alpine

ARG APP_UID=10001
ARG APP_GID=10001
WORKDIR /app
RUN addgroup -g ${APP_GID} -S app && adduser -S app -u ${APP_UID} -G app \
  && chown -R app:app /app

ENV NODE_ENV=production \
  NODE_PATH=/app/node_modules:/app/server/node_modules \
  HOME=/home/app \
  NPM_CONFIG_CACHE=/home/app/.npm \
  PRISMA_CLI_BINARY_TARGETS=linux-musl-openssl-3.0.x

RUN apk add --no-cache tini python3 make g++ libc6-compat
ENTRYPOINT ["/sbin/tini", "--"]

# Copy manifests and install all workspaces (dev included) to build
COPY package*.json ./
COPY server/package.json ./server/
COPY shared/package.json ./shared/
COPY packages/typescript-config/package.json ./packages/typescript-config/
RUN npm ci --workspaces --include-workspace-root --omit=dev=false --prefer-offline --no-audit --no-fund --maxsockets=15 --fetch-timeout=300000

# Copy source and build in correct order
COPY shared/ ./shared/
COPY server/ ./server/
COPY packages/ ./packages/
COPY prisma/ ./prisma/
# Build shared first so server can import types. Also ensure server's TS type shim is included.
RUN npm -w @dynamic-mcp/shared run build --ignore-scripts \
  && npx prisma generate --schema=shared/prisma/schema.prisma \
  && cd server \
  && mkdir -p src/types \
  && if [ -f src/types/@shared-prisma.d.ts ]; then echo "type shim present"; else echo "// added at build time" > src/types/@shared-prisma.d.ts; fi \
  && npx tsc -p tsconfig.json --outDir /app/dist \
  && cd /app

COPY server/start-prod.sh ./start-prod.sh
RUN chmod +x ./start-prod.sh && chown -R app:app /app
USER app
EXPOSE 8080
CMD ["./start-prod.sh"]


