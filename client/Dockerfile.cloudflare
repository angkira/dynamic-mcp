# Cloudflare-optimized Dockerfile for client
FROM node:22-alpine AS base
WORKDIR /app

# Dependencies stage - Cloudflare optimized
FROM base AS deps
COPY package*.json ./
COPY client/package.json ./client/
COPY shared/package.json ./shared/
COPY packages/typescript-config/package.json ./packages/typescript-config/

# Install with Cloudflare constraints
RUN --mount=type=cache,target=/root/.npm \
  npm ci --prefer-offline --no-audit --no-fund --maxsockets=10 \
  --fetch-timeout=600000 --fetch-retry-maxtimeout=120000 && \
  npm cache clean --force

# Build stage - lightweight
FROM base AS builder
ARG VITE_API_URL=/api
ARG VITE_SOCKET_URL=/socket.io
ARG NODE_ENV=production

ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_SOCKET_URL=${VITE_SOCKET_URL}
ENV NODE_ENV=${NODE_ENV}

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package*.json ./

# Copy source
COPY client/ ./client/
COPY shared/ ./shared/
COPY packages/ ./packages/

# Build with memory constraints
RUN cd shared && npm run build
RUN cd client && npm run build

# Production runtime - nginx alpine (lighter than full nginx)
FROM nginx:alpine AS runner

# Minimal nginx setup for Cloudflare
RUN addgroup -g 1001 -S nginx-user && \
  adduser -S nginx-user -u 1001

# Copy built app
COPY --from=builder /app/client/dist /usr/share/nginx/html

# Simple nginx config for Cloudflare
RUN echo 'server { \
  listen 80; \
  server_name localhost; \
  root /usr/share/nginx/html; \
  index index.html; \
  location / { \
  try_files $uri $uri/ /index.html; \
  } \
  location /api { \
  proxy_pass http://${BACKEND_HOST:-server}:${BACKEND_PORT:-3000}; \
  proxy_set_header Host $host; \
  proxy_set_header X-Real-IP $remote_addr; \
  } \
  location /socket.io { \
  proxy_pass http://${BACKEND_HOST:-server}:${BACKEND_PORT:-3000}; \
  proxy_http_version 1.1; \
  proxy_set_header Upgrade $http_upgrade; \
  proxy_set_header Connection "upgrade"; \
  } \
  }' > /etc/nginx/conf.d/default.conf

# Set environment defaults
ENV BACKEND_HOST=server
ENV BACKEND_PORT=3000

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]