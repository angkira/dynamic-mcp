services:
  # PostgreSQL database
  db:
    build: ./docker/db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main server application
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile.dev
    env_file:
      - server/.env.dev
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    working_dir: /app/server
    volumes:
      # Mount entire workspace for development
      - .:/app
      # Preserve node_modules to avoid overwriting
      - /app/node_modules
      - /app/server/node_modules
      - /app/client/node_modules
      - /app/shared/node_modules
    user: "0:0"
    command: sh -c "npx prisma generate --schema=../prisma/schema.prisma && (npm ci || npm i); npm run dev"

  # Separate MCP servers as independent services
  mcp-memory:
    profiles: [ "mcp" ]
    image: node:22-alpine
    env_file:
      - server/.env.dev
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - MCP_SERVER=memory
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3001:3001"
    working_dir: /app/server
    volumes:
      - .:/app
      - /app/node_modules
      - /app/server/node_modules
    user: "0:0"
    command: sh -c "apk add --no-cache --virtual .deps openssl ca-certificates >/dev/null 2>&1 || true; npx prisma generate --schema=../prisma/schema.prisma && (npm ci || npm i) && npm run build && node dist/mcp-servers/entry.js"

  mcp-api:
    profiles: [ "mcp" ]
    image: node:22-alpine
    env_file:
      - server/.env.dev
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - MCP_SERVER=api
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3002:3002"
    working_dir: /app/server
    volumes:
      - .:/app
      - /app/node_modules
      - /app/server/node_modules
    user: "0:0"
    command: sh -c "apk add --no-cache --virtual .deps openssl ca-certificates >/dev/null 2>&1 || true; npx prisma generate --schema=../prisma/schema.prisma && (npm ci || npm i) && npm run build && node dist/mcp-servers/entry.js"

  # Frontend client
  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile.dev
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_SOCKET_URL=${VITE_SOCKET_URL}
    env_file:
      - .env
      - client/.env.development
    depends_on:
      - server
    ports:
      - "5173:5173"
    working_dir: /app/client
    volumes:
      # Mount entire workspace for development
      - .:/app
      # Preserve node_modules to avoid overwriting
      - /app/node_modules
      - /app/client/node_modules
      - /app/shared/node_modules

volumes:
  db-data:
