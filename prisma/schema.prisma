generator client {
  provider = "prisma-client-js"
  output   = "../shared/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  chats         Chat[]
  mcpServers    MCPServer[]
  memories      Memory[]
  settings      Settings?
  oauthAccounts OAuthAccount[]
}

model Chat {
  id        Int       @id @default(autoincrement())
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
}

model Message {
  id           Int         @id @default(autoincrement())
  content      Json
  role         MessageRole @default(USER)
  chatId       Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  thoughts     Json?
  responseToId Int?        @unique
  chat         Chat        @relation(fields: [chatId], references: [id])
  responseTo   Message?    @relation("RequestResponse", fields: [responseToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  request      Message?    @relation("RequestResponse")
}

model Settings {
  id                          Int      @id @default(autoincrement())
  userId                      Int      @unique
  defaultProvider             String   @default("google")
  defaultModel                String   @default("gemini-2.5-flash-lite")
  thinkingBudget              Int      @default(2048)
  responseBudget              Int      @default(8192)
  // Per-provider API keys (stored per-user)
  openaiApiKey                String?
  googleApiKey                String?
  anthropicApiKey             String?
  deepseekApiKey              String?
  qwenApiKey                  String?
  // Per-user enabled MCP servers (list of MCPServer IDs)
  mcpEnabledServerIds         Int[]    @default([])
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  mcpAutoDiscovery            Boolean  @default(true)
  mcpDefaultTimeout           Int      @default(10000)
  mcpEnableDebugLogging       Boolean  @default(false)
  mcpMaxConcurrentConnections Int      @default(5)
  user                        User     @relation(fields: [userId], references: [id])
}

model MCPServer {
  id                         Int              @id @default(autoincrement())
  userId                     Int
  createdBy                  Int?
  name                       String
  version                    String
  description                String?
  isEnabled                  Boolean          @default(true)
  status                     MCPServerStatus  @default(DISCONNECTED)
  lastConnected              DateTime?
  transportType              MCPTransportType
  transportCommand           String?
  transportArgs              Json?
  transportEnv               Json?
  transportBaseUrl           String?
  transportTimeout           Int?
  transportRetryAttempts     Int?
  transportSessionId         String?
  authType                   MCPAuthType      @default(NONE)
  authClientId               String?
  authClientSecret           String?
  authAuthUrl                String?
  authTokenUrl               String?
  authScopes                 Json?
  authApiKey                 String?
  authHeaderName             String?
  authToken                  String?
  configAutoConnect          Boolean          @default(false)
  configConnectionTimeout    Int              @default(10000)
  configMaxRetries           Int              @default(3)
  configRetryDelay           Int              @default(2000)
  configValidateCertificates Boolean          @default(true)
  configDebug                Boolean          @default(false)
  capabilities               Json?
  scope                      MCPServerScope   @default(LOCAL)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  user                       User             @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Memory {
  id        Int      @id @default(autoincrement())
  userId    Int
  key       String?
  content   String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userId, key])
}

model OAuthAccount {
  id             Int      @id @default(autoincrement())
  userId         Int
  provider       String
  providerUserId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
  @@index([userId])
}

enum MessageRole {
  USER
  AI
}

enum MCPServerStatus {
  CONNECTED
  DISCONNECTED
  CONNECTING
  ERROR
  UNKNOWN
}

enum MCPTransportType {
  STDIO
  SSE
  STREAMABLE_HTTP
}

enum MCPAuthType {
  NONE
  OAUTH
  APIKEY
  BEARER
}

enum MCPServerScope {
  COMMON
  LOCAL
}
